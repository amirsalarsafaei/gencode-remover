package reviser

import (
	"go/ast"
	"go/parser"
	"go/token"
	"io"
	"os"
	"regexp"
)

const (
	StandardInput        = "<standard-input>"
	stringValueSeparator = ","
)

var (
	codeGeneratedPattern = regexp.MustCompile(`^// Code generated .* DO NOT EDIT\.$`)
)

type SourceFile struct {
	filePath string
}

// NewSourceFile constructor
func NewSourceFile(filePath string) *SourceFile {
	return &SourceFile{
		filePath: filePath,
	}
}

func (f *SourceFile) IsAutoGenerated() (bool, error) {

	var originalContent []byte
	var err error
	if f.filePath == StandardInput {
		originalContent, err = io.ReadAll(os.Stdin)
	} else {
		originalContent, err = os.ReadFile(f.filePath)
	}
	if err != nil {
		return false, err
	}

	fset := token.NewFileSet()

	pf, err := parser.ParseFile(fset, "", originalContent, parser.ParseComments)
	if err != nil {
		return false, err
	}

	return isFileAutoGenerate(pf), nil
}

func isFileAutoGenerate(pf *ast.File) bool {
	for _, comment := range pf.Comments {
		for _, c := range comment.List {
			if codeGeneratedPattern.MatchString(c.Text) && c.Pos() < pf.Package {
				return true
			}
		}
	}
	return false
}
